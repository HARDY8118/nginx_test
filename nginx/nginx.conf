events {

}

http {

    include "mime.types";

    server_tokens off;
    # Disable nginx headers telling versions etc

    # Enable error logging for all http requests
    error_log logs/error.log error;

    # Enable and configure gzip
    gzip on;
    gzip_comp_level 3;
    gzip_types text/javascript;
    gzip_types text/css;
    gzip_types image/png;

    # Configure fastcgi microcache
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:256k inactive=1m;
    # Directories splitted as 1 charecter from last then 2 characters from start
    # Size of cache = 256 kilobytes lesser size will result in "ngx_slab_alloc() failed: no memory"
    # Delete cache after 1 minute
    
    fastcgi_cache_key "$request_method-$scheme-$host-$request_uri";
    # Set cache format as GET-http-localhost-index/file
    
    add_header X-Cache "Cache: $upstream_cache_status";
    # Add custom header to check if request served from cache

    # Rate limiting
    limit_req_zone $request_uri zone=LIMIT_ZONE:10m rate=60r/m;
    # Limit requests based on reuest uri in zone of size 10 megabytes by 60 requests per minute = 1 r per second

    # Configure list of upstream servers
    upstream app_servers {
        # ip_hash;
        # Bound IP to a server instance if available

        least_conn;
        # Use server with least load

        server app1:3001;
        server app2:3002;
        server app2:3003;
    }

    # Add another server to listen on port 80
    server {
        listen 80;
        server_name "localhost";
        # Redirect with 301 to https site
        return 301 https://$host$request_uri;
    }

    server {
        # --Listen on port 80--
        # listen 80;
        # Listen on port 443, use SSL
        # listen 443 ssl;
        # Listen on port 443, use SSL with http2
        listen 443 ssl http2;
        # Server domain
        server_name "localhost";

        # Root folder to serve static files
        root /usr/share/nginx/html;

        # Add ssl certificate and key
        ssl_certificate /etc/nginx/ssl/self.crt;
        ssl_certificate_key /etc/nginx/ssl/self.key;

        # Disable SSL and use TLS instead
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # Optimise ciphers
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

        # Specify Diffie-Hellman Parameters
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # Enable HSTS
        add_header Strict-Transport-Security "max-age=3600" always;

        # Enable SSL sessions
        ssl_session_cache shared:SSL_ZONE:40m;
        # Use shared cache between workers in SSL_ZONE memory of size 40 megabytes
        ssl_session_timeout 4h;
        ssl_session_tickets on;
        #Issue SSL tickets

        # Disallow embeding via headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";

        # Prefix match for /test
        location /test {
            # Will match /test/* Anything statring from /test
            # Return Message "OK" with status 200
            return 200 "OK";
        }

        # Exact match for /version
        location = /version {
            # Will match /version Only
            # Return Message "OK" with status 200
            return 200 "0.1";
        }

        # Regex match for /ping
        location ~ /ping[0-9]$ {
            # Will match */ping Anything matching regex (In this case ending with /ping followed by a digit)
            # Return Message "OK" with status 200
            return 200 "Success";
        }
        # ~* for insensitive match
        # Regex match more imporntant than prefix match
        # ^~ Preferencial prefix modifier
        # Exact > Preferencial > Regex > Prefix

        # Setting error pages
        error_page 404 "/Not Found.html";
        error_page 401 "/Unauthorized.html";

        # Exact match for /inspect
        location = /inspect {
            # Checking if admin variable is set to true
            if ( $arg_admin != true ) {
                set $error_msg "Admin not set";
                return 401 "$error_msg";
            }
            add_header err "Error: $error_msg";
            # Return 200 with variables
            return 200 "Host: $host\nPath: $uri\nArgs: $args\n$date_local";
        }

        location = /icon {
            # Performing rewrite, URL will change globally in request
            return 307 /res/favicon.ico;
        }

        # Will capture anything after /re/ and store in variable $1
        rewrite /re/(w+) /$1 last;
        # Adding last flag this uri won't be re-written

        # Performin internal rewrite, URL will not change globally but will be re-evaluted
        rewrite /home /;

        location = /log {
            # Log all access requests for /log requets
            access_log logs/access.log;
            return 201 "Logged";
        }

        # rewrite /logo /static/res/nginx_logo.png;

        # location = /static/res/nginx_logo.png {
        #     image_filter rotate 180;
        # }

        location = /res/nginx_logo.png {
            add_header image_name "nginx_logo";
        }

        # Cache all by default
        set $no_cache 0;

        # Set no cache to 1 if POST request
        if ( $request_method = POST) {
            set $no_cache 1;
        }

        # Requests matching certain extension
        location ~* \.(css|js|jpg|jpeg|png|ico) {
            # Turn off logging
            access_log off;

            # Headers for adjusting cache
            add_header Cache-Control public;
            add_header Pragma public;
            add_header Vary Accept-Encoding;
            # Response can Vary based on Accept-Encoding request header
            expires 1h;
            # Expire cache after 1 hour
            add_header cached "$date_local";

            # Set caching of resources
            fastcgi_cache ZONE_1;
            fastcgi_cache_valid 200 1m;
            fastcgi_cache_valid 404 10s;

            # Cache exception
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }

        # Push requests for other resources with index.html
        location = /index.html {
            http2_push /styles/style.css;
            http2_push /scripts/script.js;
            http2_push /res/favicon.ico;

            # Limit requests
            # limit_req zone=LIMIT_ZONE burst=3;
            # 3 Additional requests will be fullfilled but adhering to limit
            limit_req zone=LIMIT_ZONE burst=3 nodelay;
            # 3 Additional requests will be fullfilled not adhering to limit
        }
        # Requests for style.css and script.js will be done with initial index.html request

        location ~ /admin {
            auth_basic "Enter 'username' and 'password'";
            auth_basic_user_file /etc/nginx/.htpasswd;
            try_files $uri.html =404;
        }

        # Location for node.js server
        location /heartbeat {
            # proxy_pass "http://app1:3001/heartbeat";
            add_header From "NGINX";
            proxy_set_header Host "Proxied: Nginx server";

            # Set upstream servers
            proxy_pass http://app_servers;
        }
    }
}